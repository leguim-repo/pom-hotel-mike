{"version":3,"sources":["logo.svg","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","handleFormSubmit","event","preventDefault","state","username","password","myHeaders","Headers","append","formdata","FormData","fetch","then","response","text","result","console","log","catch","error","Cookies","get","match","bind","class","onSubmit","this","className","type","placeholder","value","React","Component","App","src","logo","alt","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,yOCiH5BC,E,kDA3GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,iBAAmB,SAAAC,GACfA,EAAMC,iBAIW,EAAKC,MAAMC,SACX,EAAKD,MAAME,SAH5B,IAUIC,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,wCACjCF,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,SAAU,gGAC3BF,EAAUE,OAAO,8BAA+B,yBAEhD,IAAIC,EAAW,IAAIC,SACnBD,EAASD,OAAO,WAAY,QAC5BC,EAASD,OAAO,WAAY,QAS5BG,MAAM,0BACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIC,QAAQC,IAAIF,MAC3BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAI,QAASE,MAQzCH,QAAQC,IAAI,iBAAkBX,GAC9BU,QAAQC,IAAI,+BAA+BG,IAAQC,IAAI,gBAtDvDL,QAAQC,IAAI,SAAUlB,GACtBiB,QAAQC,IAAI,SAAUlB,EAAMuB,OAE5B,EAAKnB,MAAQ,CACTC,SAAU,OACVC,SAAU,QAGd,EAAKL,iBAAmB,EAAKA,iBAAiBuB,KAAtB,gBAVT,E,qDAmEf,OAAS,6BAEL,yBACIC,MAAQ,WACZ,0BACKA,MAAQ,cACbC,SACIC,KAAK1B,kBAET,wBACGwB,MAAQ,uBADX,kBALA,IAMuD,yBACnDG,UAAY,cAChB,2BACMC,KAAO,OACbJ,MAAQ,eACRK,YAAc,YACdC,MAAQ,UAZR,IAeM,yBACFH,UAAY,cAChB,2BACMC,KAAO,WACbJ,MAAQ,eACRK,YAAc,WACdC,MAAQ,UArBR,IAwBM,4BACCN,MAAQ,mCACfI,KAAO,UAFD,UAxBN,KAFA,KAFK,S,GApEGG,IAAMC,WCaXC,MAbf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKO,IAAKC,IAAMR,UAAU,WAAWS,IAAI,SAEzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMgC,c","file":"static/js/main.dcff98fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Cookies from 'js-cookie';\n\n//import axios from \"axios\";\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props)\n        console.log('props:', props);\n        console.log('match:', props.match);\n\n        this.state = {\n            username: \"demo\",\n            password: \"demo\"\n        };\n\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    }\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n\n        const endpoint = \"http://localhost:8080/authenticateTheUser\";\n\n        const username = this.state.username;\n        const password = this.state.password;\n\n        const user_object = {\n            username: username,\n            password: password\n        };\n\n        var myHeaders = new Headers();\n        myHeaders.append(\"X-XSRF-TOKEN\", \"81068ed3-c0db-4aa7-b57d-5dc4073b8ec9\");\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"Cookie\", \"JSESSIONID=6ABF33D3221AA391DEF55D31E660FEEF; XSRF-TOKEN=81068ed3-c0db-4aa7-b57d-5dc4073b8ec9\");\n        myHeaders.append(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n\n        var formdata = new FormData();\n        formdata.append(\"password\", \"demo\");\n        formdata.append(\"username\", \"demo\");\n\n        var requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: formdata,\n            redirect: 'follow'\n        };\n\n        fetch(\"http://localhost:8080/\")\n            .then(response => response.text())\n            .then(result => console.log(result))\n            .catch(error => console.log('error', error));\n\n        /*\n        fetch(endpoint, requestOptions)\n            .then(response => response.text())\n            .then(result => console.log(result))\n            .catch(error => console.log('error', error));\n        */\n        console.log('requesOption: ', myHeaders)\n        console.log('document.cookie.XSRF-TOKEN: ',Cookies.get('XSRF-TOKEN'));\n        /*\n            axios.post(endpoint, user_object).then(res => {\n              localStorage.setItem(\"authorization\", res.data.token);\n              return this.handleDashboard();\n            });\n        */\n    };\n\n\n    render() {\n        return ( <\n            div >\n            <\n            div class = \"wrapper\" >\n            <\n            form class = \"form-signin\"\n            onSubmit = {\n                this.handleFormSubmit\n            } >\n            <\n            h2 class = \"form-signin-heading\" > Please login < /h2> <\n            div className = \"form-group\" >\n            <\n            input type = \"text\"\n            class = \"form-control\"\n            placeholder = \"User name\"\n            value = \"demo\" /\n            >\n            <\n            /div> <\n            div className = \"form-group\" >\n            <\n            input type = \"password\"\n            class = \"form-control\"\n            placeholder = \"password\"\n            value = \"demo\" /\n            >\n            <\n            /div> <\n            button class = \"btn btn-lg btn-primary btn-block\"\n            type = \"submit\" >\n            Login <\n            /button> < /\n            form > <\n            /div> < /\n            div >\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Login } from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <Login></Login>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}